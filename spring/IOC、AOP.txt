## IOC:

​	IOC的直观感受就是会帮我们自动的创建实体。
​	如果没有IOC，那么当这个服务去调用另外一个服务的时候，往往需要手动去实例对象，这样容易造成服务类关系混乱且不方便管理，IOC的出现是为服务类提供一个统一管理的容器，通过一种声明的方式自动的注入java的服务中，其底层技术基础 xml 技术对实体的定义与解析和java的反射机制。

## AOP：

​	在解释AOP之前必要解释什么是切面，散落在各个业务功能组件前后，而与功能或逻辑无关可以理解为切面，如果不对切面进行管理会造成代码混乱实现繁复，利用Spring的AOP可以有效的解决业务逻辑和横切性问题的分离，从而达到解耦的目的，以提高代码的重用性和开发效率。

##### AOP应用场景：

​	1.日志记录
​	2.权限验证
​	3.效率检查
​	4.事务管理

##### AOP各种通知 在springboot 1.x 和 2.x  的执行顺序

<img src="../cacheimg/image-20201202223824716.png" alt="image-20201202223824716" style="zoom:50%;" />

1.  springboot1.x  底层对应 spring4

    正常:

    ​	环绕通知@Around 

    ->前置通知@Before

    ->业务逻辑

    ->环绕通知@Around

    ->后置通知@After

    ->返回后通知@AfterReturning

    异常:

    ​	环绕通知@Around

    ->前置通知@Before

    ->业务逻辑

    ->后置通知@After

    ->异常后通知@AfterThrowing

    ->异常

    ps:注意，正常情况下环绕通知是在业务逻辑执行之后，出现异常之后的环绕通知不会执行。

2.  ##### springboot2.x 底层对应spring5 ☆通知顺序更复合人性

    正常:

    ​	环绕通知@Around 

    ->前置通知@Before

    ->业务逻辑

    ->返回后通知@AfterReturning

    ->后置通知@After

    ->环绕通知@Around

    异常:

    ​	环绕通知@Around

    ->前置通知@Before

    ->业务逻辑

    ->异常后通知@AfterThrowing

    ->后置通知@After

    ->异常