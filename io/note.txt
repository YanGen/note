Input 和Output - 源代码和目标
	专业术语“input”和“output”有时候会有一些概念上的模糊。一个应用程序的输入部分往往是另一个部分的输出。OutputStream是一个流被写出去，还是从一个地方写进来？归根结底，OutputStream是把数据写入到读取的程序，不是么？以我个人经历发现，第一次学习Java IO的时候这些会让我有一些困惑。
	为了解决这些困惑，我曾经尝试在input和output上添加一些不同的名称，希望让从哪里输入的，输出到哪里，有一些概念上的联系。
	Java的IO包本身的主要关注点在于，从一个地方读取原始数据和向目的地写入数据。最典型的数据来源和目的地主要有：

	文件（File）
	管道（Pipes）
	网络连接（Network Connections）
	内存缓冲区，比如数组（In-memory Buffers）
	System.in, System.out, System.error


流
	IO流是Java IO的核心概念。流是一个概念上的无休止的数据流。你既可以从一个流读取数据也可以写入到一个流。流用来连接数据源与目标地。Java IO流基于字节流和字符流。

InputStream, OutputStream, Reader and Writer
	一个程序从数据源读取数据的时候，需要 InputStream或者Reader。程序写数据的时候，就需要OutputStream或Writer。

Java IO的目的和特性
	Java IO中有很多InputStream, OutputStream, Reader和Writer的子类，这些子类会用来处理不同的需求。这就是为什么有这么多类的原因。具体的用法主要有以下一些场景：

	文件
	网络流
	内存缓冲区
	管道
	缓冲
	过滤
	解析
	读写文本
	读写原始类型的数据（long等等）
	读写对象
	上面的这些可以让你在阅读Java IO相关类的时候清晰一些。更能理解这些类的目的都是什么。

根据Java IO读取文件
	如果你想从一端读取一个文件到另一端，你可以用FileInputStream或者FileReader，这取决于你是想把文件读取成字节还是字符。这两个类每次读取一个字节或者一个字符来处理整个文件，或者将字节或字符放入到字节数组或字符数组中。你没有必要读取整个文件，只需要有序的读取文件中的字符或字节就可以。

根据Java IO写文件
	如果你想从一端写一个文件到另一端，你可以用FileOutputStream或者FileWriter，这取决于你是想根据字节还是字符来写。这两个类每次写入一个字节或者一个字符来写完整个文件，或者将字节或字符放入到字节数组或字符数组中来写。数据会按顺序存储到文件当中。

通过InputStream或Reader读数组
	去写一个从数组读取数据的组件，你需要用ByteArrayInputStream或CharArrayReader包装一下字节或字符数组。这样，数组中的字节或字符就可以通过包装的stream或reader来读取了。

		byte[] bytes = new byte[1024];

		//write data into byte array...

		InputStream input = new ByteArrayInputStream(bytes);

		//read first byte
		int data = input.read();
		while(data != -1) {
		    //do something with data

		    //read next byte
		    data = input.read();
		}

通过OutputStream或Writer写入到数组
	同样的去写数据，可以用ByteArrayOutputStream或CharArrayWriter。你需要做的事情就是创建一个ByteArrayOutputStream或CharArrayWriter，然后向这里面写数据，就像你用其他的stream或writer一样。

		ByteArrayOutputStream output = new ByteArrayOutputStream();

		output.write("This text is converted to bytes".getBytes("UTF-8"));

		byte[] bytes = output.toByteArray();

System.in
	System.in是一个InputStream，它是控制台程序的典型的接受键盘输入的流。由于数据经常通过配置文件或命令行参数传递给Java程序，所以不会经常用它。在GUI应用中，程序的输入是GUI提供的。这是一个来自Java IO中独立的input机制。

System.out
	System.out是一个PrintStream。它经常把你写入的数据输出到控制台。它经常用在命令行工具中。在debug模式打印报告中也会经常用到它（虽然它不是最好的往事去输出debug信息）

System.err
	System.err是一个PrintStream。它的作用有些像System.out，不同的是它一般用来打印错误日志。一些程序（比如Eclipse）会用红色字体来显示System.err的输出日志。

