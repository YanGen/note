
泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法


泛型类
	泛型类型用于类的定义中，被称为泛型类。通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map。

	泛型类的最基本写法
		class 类名称 <泛型标识：可以随便写任意标识号，标识指定的泛型的类型>{
		  private 泛型标识 /*（成员变量类型）*/ var; 
		  .....
		  }
		}
	例子
		//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型
		//在实例化泛型类时，必须指定T的具体类型
		public class Generic<T>{ 
		    //key这个成员变量的类型为T,T的类型由外部指定  
		    private T key;

		    public Generic(T key) { //泛型构造方法形参key的类型也为T，T的类型由外部指定
		        this.key = key;
		    }

		    public T getKey(){ //泛型方法getKey的返回值类型为T，T的类型由外部指定
		        return key;
		    }
		    public static void main(String[] args) {
		        Generic test = new Generic<>();
		        Generic<String> stest = new Generic<>();
		    }
		}

泛型接口
	泛型接口与泛型类的定义及使用基本相同。泛型接口常被用在各种类的生产器中。

	//定义一个泛型接口
	public interface Generator<T> {
	    public T next();
	}

	/**
	 * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中
	 * 即：class FruitGenerator<T> implements Generator<T>{
	 * 如果不声明泛型，如：class FruitGenerator implements Generator<T>，编译器会报错："Unknown class"
	 */
	class FruitGenerator<T> implements Generator<T>{
	    @Override
	    public T next() {
	        return null;
	    }
	}

	/**
	 * 传入泛型实参时：
	 * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator<T>
	 * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。
	 * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型
	 * 即：Generator<T>，public T next();中的的T都要替换成传入的String类型。
	 */
	public class FruitGenerator implements Generator<String> {

	    private String[] fruits = new String[]{"Apple", "Banana", "Pear"};

	    @Override
	    public String next() {
	        Random rand = new Random();
	        return fruits[rand.nextInt(3)];
	    }
	}

泛型通配符

	public void showKeyValue1(Generic<?> obj){
	    Log.d("泛型测试","key value is " + obj.getKey());
	}

	类型通配符一般是使用？代替具体的类型实参，注意了，此处 ？ 是类型实参，而不是类型形参，此处的 ？ 和Number、String、Integer一样都是一种实际的类型，可以把 ？ 看成所有类型的父类。是一种真实的类型。

	可以解决当具体类型不确定的时候，这个通配符就是 ?  ；当操作类型时，不需要使用类型的具体功能时，只使用Object类中的功能。那么可以用 ? 通配符来表未知类型。

泛型方法
	泛型类，是在实例化类的时候指明泛型的具体类型；泛型方法，是在调用方法的时候指明泛型的具体类型 。

	/**
	 * 泛型方法的基本介绍
	 * @param tClass 传入的泛型实参
	 * @return T 返回值为T类型
	 * 说明：
	 *     1）public 与 返回值中间<T>非常重要，可以理解为声明此方法为泛型方法。
	 *     2）只有声明了<T>的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。
	 *     3）<T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。
	 *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。
	 */
	public <T> T genericMethod(Class<T> tClass)throws InstantiationException ,
	  IllegalAccessException{
	        T instance = tClass.newInstance();
	        return instance;
	}
	// 调用时 要传具体的Class
	Object obj = genericMethod(Class.forName("com.test.test"));

	// 这个例子另一个对比加深
	public <E> void show(E t){
        System.out.println(t.toString());
    }

	泛型方法能使方法独立于类而产生变化。
	另外对于一个static的方法而已，无法访问泛型类型的参数。所以如果static方法要使用泛型能力，就必须使其成为泛型方法。

泛型上下边界
	在使用泛型的时候，我们还可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。
	为泛型添加上边界，即传入的类型实参必须是指定类型的子类型。
		// 上边界
		// 假设 A -> B -> C -> D 是继承关系
		// TestA 指定进入泛型需要时 A 级以下
		public class TestA<T extends A>{
		    T t;
		}

		// 下边界
		// TestB 必须时D级以上
		public class TestB<T super D>{
		   T t;
		}


		上下边界可参考 https://www.cnblogs.com/glassysky/p/12008721.html

