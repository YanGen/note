1.序列封包 序列解包 - *号用法
2.列表
    增
        append(可作入栈) extend和+ insert
    删
        del remove (pop出栈)
    改
        = 直接赋值 支持切片赋值
    查
        count()：统计列表中某个元素出现的次数。
        index()：判断某个元素在列表中出现的位置。
    反转排序
        reverse()：用 于将列表中的元素反向存放
        sort()： 用于对列表元素排序。
3.字典
    除了支持索引取值外 支持get() 索引取不到报错 get取不到返回None
4.流程控制 
	if - elif - else 
		False None 、0、""、（）、［］、{}  会被解释器当作 False 处理
	assert 断言
		assert False 会抛 AssertionError 错误
5.for表达式 列表推导式---收集值作为列表
	例子
		a_list = [x*x for x in range(10)]
		b_list = [x*x for x in range(10) if x % 2 == 0]
		c_generator = (x * x for x in a_range if x % 2 == 0) 生成器
		d_list= [(x, y) for x in range(5) for y in range(4)] 嵌套两层for循环生成元组
		e list = [[x,y,z] for x in range(5) for y in range(4) for z in range(3)] 嵌套三层for循环生成列表
6.函数
	参数收集(* 个数可变 最多可携带一个)
	收集关键字参数（** 最多可携带一个)

	参数传递机制
		类似java 中的值传递和引用传递。
		① 不管什么类型的参数,在 Python 数中对参数直接使用 “＝” 符号赋值是没用,直接使用“＝”符号赋值并不能改变参数。
		② 需要让函数修改某些数据,则可以通过把这些数据包装成列表、字典等可变对象,然后把列表、宇典等可变对象作为参数传入函数,在函数通过列表 字典的方法修改它们,这样才能改变这些数据。
	赋值
		def fun1(): -> fun2 = fun1
	传参
		def fun(fun1):
	返回
		return fun1
7.变量作用域
	globals() 全局变量字典
	locals() 局部变量字典
8.lambda表达式 简洁写出功能函数,使用完将立即释放
	lambda param1,param2... : 表达式
9.类 - self自动绑定
	＠classmethod 修饰的方法就是类方法：使用＠staticmethod 修饰的方法就是静态方法(一般用不到)。
	调用类方法,类会自动绑定到第1个参数。
	调用静态方法，不会自动绑定。
10.模块 和 包 区别
	包 就是 多个模块源的组成 包 的本质就是模块
	


