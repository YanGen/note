适配器模式主要功能就是把一个类原来无法使用的接口转换为可以使用的接口；

优点#
	将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。

	增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。

	灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。

三种方式：
	类适配器：主要通过继承
	对象适配器模式（常用)：通过聚合使用
	接口适配器模式:也有文献称之为认适配器模式(Default Adapter Pattern)或缺省适配器模式。 
		当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求，它适用于一个接口不想使用其所有的方法的情况。
总结：
	三种命名方式，是根据 src是以怎样的形式给到Adapter（在Adapter里的形式）来命名的。 
	类适配器，以类给到，在Adapter里，就是将src当做类，继承， 
	对象适配器，以对象给到，在Adapter里，将src作为一个对象，持有。 
	接口适配器，以接口给到，在Adapter里，将src作为一个接口，实现。
	Adapter模式最大的作用还是将原本不兼容的接口融合在一起工作。 
	但是在实际开发中，实现起来不拘泥于本文介绍的三种经典形式