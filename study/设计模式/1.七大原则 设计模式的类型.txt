
	接口是方法的抽象 而抽象类是对象的抽象
	核心：所有原则实际围绕降低各方的耦合

一、七大原则
	1.开闭原则（Open Closed Principle，OCP）
		最基础、最重要的设计原则
		对未有的进行扩展开放，对原有的修改关闭

	2.单一职责原则（Single Responsibility Principle, SRP）
		职责单一降低复杂度
	3.里氏代换原则（Liskov Substitution Principle，LSP）
		继承父类实际上会带来父子类的耦合度增强，子类尽量不要重新父类的方法，而继承父类最好继承“抽象”类，设想较为Base父类，子类就不必重写父类方法，换句话说Base类是所有子类存在的通用方法，若有不同就不要写进去了
	4.依赖倒转原则（Dependency Inversion Principle，DIP）
		1）高层不应该依赖底层，细节应该以来抽象
		2）理念：相对于细节的事物总是多变，而抽象则趋于稳定
		3）依赖传递的三种方式：接口传递、构造方法传递和setter传递

	5.接口隔离原则（Interface Segregation Principle，ISP）
		别浪费原则
	6.合成（组合）/聚合复用原则（Composite/Aggregate Reuse Principle，CARP）
		一句话，尽量使用合成/聚合的方式而非继承
		组合（一个人的头）：一经实例就有，同生共死，不可分割的属性
		聚合（一个人的衣服）：后来才传进来的属性。

	7.最少知识原则（Least Knowledge Principle，LKP）或者迪米特法则（Law of Demeter，LOD）
		封装好自己的逻辑，虽然类与类的依赖不可避免，但对其他类中各个属性等内容知道的越少越好
二、设计模式的分类
　　根据其目的（模式是用来做什么的）可分为创建型(Creational)，结构型(Structural)和行为型(Behavioral)三种：
　　　　• 创建型模式主要用于创建对象。
　　　　• 结构型模式主要用于处理类或对象的组合。
　　　　• 行为型模式主要用于描述对类或对象怎样交互和怎样分配职责。
　　根据范围（模式主要是用于处理类之间关系还是处理对象之间的关系）可分为类模式和对象模式两种：
　　　　•类模式处理类和子类之间的关系，这些关系通过继承建立，在编译时刻就被确定下来，是属于静态的。
　　　　•对象模式处理对象间的关系，这些关系在运行时刻变化，更具动态性。
	创建型模式
	　　抽象工厂模式(Abstract Factory)
	　　建造者模式(Builder)
	　　工厂方法模式(Factory Method)
	　　原型模式(Prototype)
	　　单例模式(Singleton) 
	结构型模式
	　　适配器模式(Adapter)
	　　桥接模式(Bridge)
	　　组合模式(Composite)
	　　装饰模式(Decorator)
	　　外观模式(Facade)
	　　享元模式(Flyweight)
	　　代理模式(Proxy)
	行为型模式
	　　职责链模式(Chain of Responsibility)
	　　命令模式(Command)
	　　解释器模式(Interpreter)
	　　迭代器模式(Iterator)
	　　中介者模式(Mediator)
	　　备忘录模式(Memento)
	　　观察者模式(Observer)
	　　状态模式(State)
	　　策略模式(Strategy)
	　　模板方法模式(Template Method)
	　　访问者模式(Visitor)