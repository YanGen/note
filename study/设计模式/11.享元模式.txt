介绍：
	运行共享技术有效支持大量细粒度的对象
	常用于系统底层开发，解决系统性能问题，像数据库连接池

享元模式经典应用场景就是池技术
享：共享 
元：理解为对象

优点：大大减少对象的创建，降低系统的内存，使效率提高。

在享元对象内部并且不会随环境的改变而改变的共享部分，可以称为是享元对象的内部状态，而随环境改变而改变的、不可以共享的状态就是外部状态了

（1）Flyweight（抽象享元类）：它通常是一个接口或者抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法设置外部数据（外部状态）。

（2）ConcreteFlyweight（具体享元类）：它实现抽象享元类，其实例成为享元对象，并在具体享元类中为内部状态提供了存储空间。通常可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。

（3）UnsharedConcreteFlyweoght（非共享具体享元类）：并不是所有的抽象享元类的子类都需要被共享，用户可以将不能被共享的子类设计为非共享具体享元类，当需要一个非共享具体享元类的时候可以直接通过实例化创建。

（4）FlyweightFactory（享元工厂类）：用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中，享元池一般设计为一个存储“键值对”的集合（字典），可以结合工厂模式进行设计。
	
	