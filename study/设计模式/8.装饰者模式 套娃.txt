介绍：
	在不改变原代码结构的情况下，动态地扩展一个对象的功能，相比继承有更灵活的实现方式。见名知意，其就是在需要增强功能的对象上包装一层代码，达到增强功能的效果

	呈现为 在装饰者内存在一个被装饰者，而装饰者和被装饰者同属一个超类（父类或基类），层层“递归”进行传递和不断附加新的功能（或属性）

例子：
	奶茶价格计算
		将奶茶价格规结为三个层次，单品、配料和包装，这三个层次都包含了多种形式，这时候采用装饰就可以很好的解决
		下面用-> 表示装饰

		第一步 配料 -> 单品 = 奶茶（基类、父类、超类）
		第二部 包装 -> (配料 -> 单品) = 奶茶（基类、父类、超类）

		这样当系统增加一个单品或者某种调味品的扩展性能都非常良好

	机器狗升级
		1.普通狗 = 狗（基类、父类、超类）
		2.吃饭功能->普通狗 = 狗（基类、父类、超类）
		3.洗手功能 -> (吃饭功能->普通狗) = 狗（基类、父类、超类）
应用：
	增强功能的需求时可以想一想装饰者模式