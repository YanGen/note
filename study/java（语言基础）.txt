基本数据类型：
	
数据类型					默认值
byte					0
short					0
int						0
long					0L
float					0.0f
double					0.0d
char					'u0000'
String (or any object)	null
boolean					false

- 原始类型: boolean，char，     byte，short，int，    long，float，double
- 包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double


Java程序初始化的执行顺序：
	父类静态代码块，父类静态成员变量（同级，按代码顺序执行）
	子类静态代码块，子类静态成员变量（同级，按代码顺序执行）
	父类普通代码块，父类普通成员变量（同级，按代码顺序执行）
	父类构造方法
	子类普通代码块，子类普通成员变量（同级，按代码顺序执行）
	子类构造方法

静态变量，被所有实例对象共享

i++ 先取值后自增
++i 后自增先取值
int i=5;
int s=(i++)+(++i)+(i--)+(--i); // 5+7+7+5 = 24

启动线程方法start()
线程stop方法已经被弃用
守护线程在非守护线程结束后，会自动结束
等待其他线程通知方法是wait()

String 和StringBuffer的区别
	String和StringBuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。这个String类提供了数值不可改变的字符串。而这个StringBuffer类提供的字符串进行修改。当你知道字符数据要改变的时候你就可以使用StringBuffer。典型地，你可以使用StringBuffers来动态构造字符数据。

Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？
	synchronized修饰静态方法以及同步代码块的synchronized (类.class)用法锁的是类，线程想要执行对应同步代码，需要获得类锁。
	synchronized修饰成员方法，线程获取的是当前调用该方法的对象实例的对象锁。

Overload和Override的区别，Overloaded的方法是否可以改变返回值的类型?
	重写Overrid是父类与子类之间多态性的一种表现，重载Overload是一个类中多态性的一种表现。方法的重写Overrid和重载Overload是Java多态性的不同表现。
StringBuffer和StringBuilder有什么区别，底层实现上呢？
	StringBuffer线程安全，StringBuilder线程不安全，底层实现上的话，StringBuffer其实就是比StringBuilder多了Synchronized修饰符。

泛型
	泛型就是指广泛的、普通的类型。在java中是指把类型明确的工作推迟到创建对象或调用方法的时候才去明确的特殊的类型。

	例子：
		List<String> strings = new ArrayList<String>();
		strings.add("a String");
		String aString = strings.get(0);

	泛型可以应用到 类（泛型类）或方法（泛型方法），当我们只需要关注方法本身或者类本身时，可以使用泛型这时候可以提供代码的复用，当用户使用类时才把类型确定下来。

	public class ObjectTool<T> {
	    private T obj;

	    public T getObj() {
	        return obj;
	    }

	    public void setObj(T obj) {
	        this.obj = obj;
	    }

	    public <T> void show(T t) {
	        System.out.println(t);
	    }
	}