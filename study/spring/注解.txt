1.@Configuration注解
	该类等价 与XML中配置beans，相当于Ioc容器，它的某个方法头上如果注册了@Bean，就会作为这个Spring容器中的Bean，与xml中配置的bean意思一样。

2.@ComponentScan
	value  指定要扫描的包。
	includeFilters 指定扫描的时候只需要包含哪些组件；
	excludeFilters 指定扫描的时候按照什么规则排除那些组件；
	它们两个都是一个Filter[]，在上面的代码中也有，Filter中有个FilterType，它是一个枚举类，有5种类型。
	FilterType.ANNOTATION：按照注解
	FilterType.ASSIGNABLE_TYPE：按照给定的类型；
	FilterType.ASPECTJ：使用ASPECTJ表达式
	FilterType.REGEX：使用正则指定
	FilterType.CUSTOM：使用自定义规则

3.@Controller, @Service, @Repository,@Component 
	这四个用法没有区别,但是习惯上 ,但是@Controller：一般用于表现层的注解。 @Service：一般用于业务层的注解。 @Repository：一般用于持久层的注解。

4.@PostConstruct 和 @PreDestory 
	实现初始化和销毁bean之前进行的操作，只能有一个方法可以用此注释进行注释，方法不能有参数，返回值必需是void,方法需要是非静态的。
		public class TestService {   
  
		    @PostConstruct    
		    public void  init(){    
		        System.out.println(“初始化”);    
		    }    
		        
		    @PreDestroy    
		    public void  dostory(){    
		        System.out.println(“销毁”);    
		    }    
		} 

5.@Scpoe
	用于调整作用域，默认是singleton，单例的。来看一下源码里面怎么说吧：
	prototype：多实例的：ioc容器启动并不会去调用方法创建对象放在容器中。每次获取的时候才会调用方法创建对象；
	singleton：单实例的（默认值）：ioc容器启动会调用方法创建对象放到ioc容器中。以后每次获取就是直接从容器（map.get()）中拿，
	request：同一次请求创建一个实例
	session：同一个session创建一个实例

6.@Primary
	自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常。

7.@Lazy
	懒加载：
		单实例的Bean：默认在容器启动的时候创建对象
		懒加载：容器启动不创建对象。第一次使用(获取)Bean创建对象，并初始化
8.@Autowired
	自动注入，Autowired默认先按byType，如果发现找到多个bean，则，又按照byName方式比对，如果还有多个，则报出异常。
9. @Async
	基于@Async标注的方法，称之为异步方法,这个注解用于标注某个方法或某个类里面的所有方法都是需要异步处理的。被注解的方法被调用的时候，会在新线程中执行，而调用它的方法会在原来的线程中执行。
10.@Qualifier
	使用@Qualifier指定需要装配的组件的id。
	例如：当你有两个相同类型的service时，为@Service("userService1")，@Service("userService2");然后你
	@Autowired注解了private UserService userService；这样子Spring不知道你需要哪个service，所以你可以在userService上加上@Qualifier("userService1")与自动注入搭配使用。
11.@Singleton
	只要在类上加上这个注解，就可以实现一个单例类，不需要自己手动编写单例实现类。

12.@Valid,@Valided
	请求校检，详细百度。
