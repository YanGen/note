PC寄存器（程序计数器）：
	Count ++ Count -- 每执行一行都会记录下来

栈：
	每个线程私有的，线程在运行时，在执行每个方法的时候都会打包成一个栈帧，存储了局部变量表，操作数栈，动态链接，方法出口等信息，然后放入栈。每个时刻正在执行的当前方法就是虚拟机栈顶的栈桢。方法的执行就对应着栈帧在虚拟机栈中入栈和出栈的过程。栈桢大小缺省为1M，可用参数 –Xss调整大小，例如-Xss256k。

本地方法栈：
	存放原C++实现的内容，关键字native （历史原因）

堆（也叫做对内存或者对空间deap）：
	用来存放程序动态生成的数据。（new 出来的对象的实例存储在堆中，但是仅仅存储的是成员变量，也就是平时所说的实例变量，成员变量的值则存储在常量池中。成员方法是此类所实现实例共享的，并不是每一次new 都会创建成员方法。成员方法被存储在方法区，并不是存储在第一个创建的对象中，因为那样的话，第一个对象被回收，后面创建的对象也就没有方法引用了。静态变量也存储在方法区中。局部变量在栈内存中，JVM为每一个类分配一个栈帧，然后引用类型的局部变量指向堆内存中的地址），堆是内存中共享的区域，要考虑线程安全的问题。
	参数调整：
	-Xms：堆的最小值；
	-Xmx：堆的最大值；
	-Xmn：新生代的大小；
	-XX:NewSize；新生代最小值；
	-XX:MaxNewSize：新生代最大值；
	例如- Xmx256m

方法区/永久代
	用于存储已经被虚拟机加载的类信息，常量("zdy","123"等)，静态变量(static变量)等数据，可用以下参数调整：
	jdk1.7及以前：-XX:PermSize；-XX:MaxPermSize；
	jdk1.8以后：-XX:MetaspaceSize； -XX:MaxMetaspaceSize
	jdk1.8以后大小就只受本机总内存的限制
	如：-XX:MaxMetaspaceSize=3M

直接内存
	不是虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域；如果使用了NIO,这块区域会被频繁使用，在java堆内可以用directByteBuffer对象直接引用并操作；
	这块内存不受java堆大小限制，但受本机总内存的限制，可以通过-XX:MaxDirectMemorySize来设置（默认与堆内存最大值一样），所以也会出现OOM异常。



Execution Engine 执行引擎：执行代码

GC
Jmeter

JVM调优 --》 堆内存调优 --》 堆内存各空间大小参数调优、GC调优
