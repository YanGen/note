概述
	JVM其主要任务是装载字节码文件到其内部，但字节码文件中的指令并非等价于CPU所能执行的机器指令，所包含的仅仅只是JVM所识别的字节码指令、符号表以及其他信息。
	而执行引擎的任务就是把字节码指令通过解释/编译形成CPU所能执行的机器指令。

运行Java程序的过程：
	前端编译：
		javac.exe
			把Java源码文件（.java）编译成Class文件(.class)的过程。

	后端编译：
		解释器(逐行翻译 低效)
			字节码解释器
			模板解释器
		JIT编译器(整片翻译 热点代码由方法区缓存 cacheCode)
			整个函数体编译成机器码。
	ps:Java语言由此为半解释半编译语言，JVM在运行期负责不断地解释了，解释成对于平台的机器指令。

机器码：0101 二进制
> 指令：mov inc...与机器码一一对应
> 指令集 常见x84指令集、ARM指令集
> 汇编语言 助记符代替指令，CPU运行需要翻译(汇编)成机器指令
> 高级语言 逐层往上翻译成机器码
	ps
		.java --javac--> .class(字节码文件) 
		.class -->执行引擎--> 机器码

为什么要有字节码文件？或者为什么要有前端编译的过程？
	字节码是源代码经过前端编译结果，较于源代码更容易被虚拟机解释执行，字节码处于源代码和虚拟机之间作为一个中间层，使得虚拟机更关注后端编译，更容易实现跨平台；
	另外，前端编译作为运行的准备阶段，虽然多了一步但运行的整体速度提升；
	因为字节码的分层让虚拟机有执行其他语言的能力，当然前提是其他语言必须编译成同样规范的字节码文件；