数据库 dml、ddl、dcl
	DML（Data Manipulation Lanaguage，数据操纵语言）
		SELECT、INSERT、UPDATE和DELETE，主要是用来对数据进行CRUD操作。
	DDL（Data Definition Language，数据定义语言）
		CREATE、ALTER、DROP等。DDL主要是用在定义或改变表的结构、数据类型、表之间的链接或约束等初始化工作上。
	DCL（Data Control Language，数据库控制语言）
		DCL是用来设置或更改数据库用户或角色权限的语句，包括GRANT、DENY、REVOKE等语句，这个层面应该主要是DBA做的事情了。


Mysql 逻辑分层 由上往下
	连接层
	服务层 
		提供用户增删改查的接口（select...）
	引擎层
		innodb(默认)：事务优先 适合高并发 行锁
		MyISAM：性能优先 表锁
	存储层

SQL 优化
	原因：性能低、执行时间太长、sql语句欠佳
	索引：
		相当于书的目录、是数据结构
		索引弊端：
			索引本身很大 需要一定的内存和硬盘空间
			索引会降低增删改（数据变动操作）的效率 
		不适用索引：
			1.数据量少，弊端如上
			2.数据改动频繁

		B树
			一般指B+树 数据全部存放在节点 这导致用B+树查询次数等于树的高度

索引
	分类：
		主键索引：primary key 默认是主键索引 唯一不重复 不可以为null
		单值索引：表中某一列作为索引。
		唯一索引：唯一不重复 可以为null
		复合（联合）索引：表中多列构成索引。
			对复合索引的理解就是复合两个就是二级目录，复合三个字段就是三级目录
			假设查找员工，索引复合了 （部门，员工）那么索引第一次将找部门 部门之后找员工

SQL 性能分析
	分析SQL 执行计划 ：explain sql语句

	1.数据小的表优先查询；
	2.嵌套查询第一层应该尽量挑选查询结果越少的；

	explain 分析结果列
	id ：id越大越后执行 比如嵌套表最里面最先执行id最大
	type：索引类型
		system>const>eq_ref>ref>range>index>all 前提有索引
		system、const为理想情况 实际中一般只能优化到ref、range

		system/const ：结果只有一条数据
		eq_ref:结果多条，但每条唯一
		ref：结果多条，不唯一
		range：检索指定范围了，（between ，> < >= ）
		index:查询全部索引数据
		all：扫描全表数据
		由上往下 效率降低
		


