1.什么是MQ？
	MQ-Message Queue，消息队列，是一个web组件，更是在分布式系统的不同服务之间进行消息的发送与接受的一种技术方案。


2.为什么要使用MQ？----应用场景
	1）异步
	2）解耦
	3）削峰
	4）日志处理
	5）纯粹的消息通信

3.什么是JMS？
	JMS-Java Message Service 是Java平台上有关面向消息中间件的技术规范，它的存在方便于Java应用程序进行消息交换。
4.JMS的消息类型？
	· TextMessage–一个字符串对象
	· MapMessage–一套名称-值对
	· ObjectMessage–一个序列化的 Java 对象
	· BytesMessage–一个字节的数据流
	· StreamMessage – Java 原始值的数据流	
5.JMS的消息传递模式？
	点对点模式：一个生产者和一个消费者一一对应
	发布-订阅模式 ：一个生产者可以有多个消费者
7.两种消息传递模式有何区别？
	发布订阅的模式 默认的请情况下：消息的内容不存在服务器，当生产者发送了一个消息，如果消费者之前没有订阅，就没了。
	点对点的方式：默认的请情况下：将消息存储在服务器上，消费者随时来取，但是一旦一个消费者获取到了消息，这个消息就没有了。

8.MQ优缺点？
	在特殊场景下有奇效，如上。
	1、系统可用性降低
	万一 MQ 挂了怎么办?这就引出一个问题，加入了 MQ 之后，系统的可用性是不是就降低了?因为多了一个风险因素：MQ 可能会挂掉。只要 MQ 挂了，数据没了，系统运行就不对了。

	2、系统复杂度提高
	本来我的系统通过接口调用一下就能完事的，但是加入一个 MQ 之后，需要考虑消息重复消费、消息丢失、甚至消息顺序性的问题。为了解决这些问题，又需要引入很多复杂的机制，这样一来是不是系统的复杂度提高了。

	3、数据一致性问题
	本来好好的，A 系统调用 BC 系统接口，如果 BC 系统出错了，会抛出异常，返回给 A 系统让 A 系统知道，这样的话就可以做回滚操作了。但是使用了 MQ 之后，A 系统发送完消息就完事了，认为成功了。而刚好 C 系统写数据库的时候失败了，但是 A 认为 C 已经成功了?这样一来数据就不一致了。通过分析引入 MQ 的优缺点之后，就明白了使用 MQ 有很多优点，但是会发现它带来的缺点又会需要你做各种额外的系统设计来弥补。最后你可能会发现整个系统复杂了好几倍，所以设计系统的时候要基于这些考虑做出取舍，很多时候你会发现该用的还是要用的。

9.如何防止消息重复发送?
	解决方法：增加消息状态表。
	通俗来说就是一个账本，用来记录消息的处理状态，每次处理消息之前，都去状态表中查询一次，如果已经有相同的消息存在，那么不处理，可以防止重复发送。
10.丢消息怎么办?
	解决方案：用持久化消息【可以使用对数据进行持久化JDBC，AMQ(日志文件)，KahaDB和LevelDB】，或者非持久化消息及时处理不要堆积，或者启动事务，启动事务后，commit()方法会负责任的等待服务器的返回，也就不会关闭连接导致消息丢失了。
11.持久化消息非常慢?
	默认的情况下，非持久化的消息是异步发送的，持久化的消息是同步发送的，遇到慢一点的硬盘，发送消息的速度是无法忍受的。但是在开启事务的情况下，消息都是异步发送的，效率会有2个数量级的提升。所以在发送持久化消息时，请务必开启事务模式。其实发送非持久化消息时也建议开启事务，因为根本不会影响性能。