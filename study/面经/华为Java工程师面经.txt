1.面向对象的特征以及六大原则
	三大特性：
		封装：  一个类封装了数据以及操作数据的代码逻辑体。定义了数据的可访问属性（私有、公有）
		继承 ： 可以让一个类型获取另外一个类型的属性的方式。分为实现继承和接口继承
		多态 ： 类实例的一个方法在不同情形下有不同的表现形式，即不同的外在行为。使具有不同的内部结构的对象可以共享相同的外部接口。
	六大原则:
		单一职责原则 SRP (Single Responsibility Principle) 一个类仅负责一项职责。
		开放封闭原则 OCP (Open－Close Principle) 对扩展是开放的，而对修改是封闭。
		里式替换原则 LSP (the Liskov Substitution Principle LSP) 子类必须完全实现父类的方法，子类可以有自己的个性。
		依赖倒置原则 DIP (the Dependency Inversion Principle DIP) 高层模块不应该依赖低层模块，细节依赖抽象。 依赖倒置原则更加精简的理解就是“面向接口编程”
		接口分离原则 ISP (the Interface Segregation Principle ISP)  建立单一接口，不要建立庞大臃肿的接口，尽量细化接口
		迪米特原则 LOD (Law of Demeter) 使各个模块之间的耦合尽量的低，才能提高代码的复用率。

2.final、finally与finalize的区别
	final:
		final可以用来修饰类，方法和变量（成员变量或局部变量）。
		当用final修饰类的时，表明该类不能被其他类所继承。当我们需要让一个类永远不被继承，此时就可以用final修饰，final类中所有的成员方法都会隐式的定义为final方法。
		final修饰方法时，方法不能被重写。
		final成员变量表示常量，只能被赋值一次，赋值后其值不再改变。类似于C++中的const。
	finally:
		finally作为异常处理的一部分，它只能用在try/catch语句中，并且附带一个语句块，表示这段语句最终一定会被执行（不管有没有抛出异常,只要try块执行且不手动终止虚拟机finally就会执行,r如果try块存在return,那么finally撤销之前的return语句，继续执行最后的finally块中的代码。），经常被用在需要释放资源的情况下。
	finalize:
		finalize()是在java.lang.Object里定义的，也就是说每一个对象都有这么个方法。这个方法在gc启动，该对象被回收的时候被调用。
3.==、equals和hashCode
	==的作用:比较两个操作数的关系，反回布尔类型结果。
		如果两个操作数是基本数据类型,那么比较值是否相等。如果两个操作数是引用类型,则比较的是内存地址。
	equals是Object类的实例方法，实现的代码段如下
		    public boolean equals(Object obj) {
				return (this == obj);
			}
		在Object中比较的是对象的地址，String、Integer、Long很多封装类重写了equals方法，相对地址进行比较、如果地址不同再对内容进行比较。
	hashCode是Object类的本地方法，返回对象和的内存地址处理后的结构。同样的许多封装类也重写了hashCode()的方法。

	equals和hashCode的区别和联系
	set集合是无序的，因此是不能重复的，那么怎么能保证不能被放入重复的元素呢，单靠equals方法进行比较的话，如果原来集合中以后又10000个元素了，那么放入10001个元素，难道要将前面的所有元素都进行比较，看看是否有重复，欧码噶的，这个效率可想而知，因此hashcode 就应遇而生了。

	所有对于需要大量并且快速的对比的话如果都用equal()去做显然效率太低，所以解决方式是，每当需要对比的时候，首先用hashCode()去对比，如果hashCode()不一样，则表示这两个对象肯定不相等（也就是不必再用equal()去再对比了）,如果hashCode()相同，此时再对比他们的equal()，如果equal()也相同，则表示这两个对象是真的相同了，这样既能大大提高了效率也保证了对比的绝对正确性！

	通常如果重写了equals方法，也需要重写hashCode方法，并且要保证equals方法返回true时，hashCode()返回的值要相同。


4.Java容器ArrayList、LinkedList、HashMap、HashSet、HashTable的理解，以及应用场景
	①ArrayList和LinkedList区别：
		1）ArrayList和LinkedList的主要差别是底层的数据结构的有所不同，这是造成他在功用方面的有所不同，ArrayList是基于数组实现的，LinkList是双链表实现的。另外，LinkedList还实现了双向队列，栈和List集合使用，功能强大。
		2)因为Array是基于索引(index) 的数据结构，所有运用索引在数组上取值是很快的，虽然索引取值很快但插入删除的开销却很大。LinkedList恰相反 ，LinkedList检索列表元素的性能较差，但插入和删除只要剔除元素后将地址指针相应改变即可。此外LinkedList相对于ArrayList需要更多的存储空间，因为LinkedList出存储当前元素的值外还要存储前后节点的位置。
	使用场景有所不同：
		1）如果程序对数据又较多的随机访问，ArrayList要优于LinkedList
		2）如果应用程序有更多的插入或者删除操作，较少的数据读取，LinkedList对象要优于ArrayList对象
		3）如果有特殊情况 比如程序总是在靠近末尾的地方插入，那么ArrayList的插入删除不一定比LinkedList慢。
	②HashMap和Hashtable的区别
		HashMap和Hashtable都实现了Map接口，主要的区别有：线程安全性，同步(synchronization)，以及速度。HashMap几乎可以等价于Hashtable，除了HashMap是非synchronized的，并可以接受null(HashMap可以接受为null的键值(key)和值(value)，而Hashtable则不行)。
		HashMap是非synchronized，而Hashtable是synchronized，意味着Hashtable是线程安全的，多个线程可以共享一个Hashtable；而多个线程是不能共享HashMap的。Java 5提供了ConcurrentHashMap，它是HashTable的替代，比HashTable的扩展性更好。
	③HashMap和HashSet的区别
		HashSet实现了Set接口，它不允许集合中有重复的值，HashMap实现了Map接口，Map接口对键值对进行映射。
		HashSet扩展了HashMap,所以底层还是用到map存储，存储实现同map一致，HashMap储存键值，HashSet存储对象。


5.线程的基本状态，其中的wait() sleep()  yield()方法的区别。
	Java线程具有五中基本状态
		新建状态（New）：当线程对象对创建后，即进入了新建状态，如：Thread t = new MyThread();
		就绪状态（Runnable）：当调用线程对象的start()方法（t.start();），线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不是说执行了t.start()此线程立即就会执行；
		运行状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。注：就     绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中；
		阻塞状态（Blocked）：处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才有机会再次被CPU调用以进入到运行状态。根据阻塞产生的原因不同，阻塞状态又可以分为三种：
			1.等待阻塞：运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态；
			2.同步阻塞 -- 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态；
			3.其他阻塞 -- 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。
		死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。
	sleep()、yield()、wait()三种让线程暂停方法的区别：
		sleep:中文意思睡眠，当当前线程调用sleep()后，线程进入阻塞状态，即使当前CPU空闲也不会执行当前线程。
		yield:中文意思有让步的意思，当当前线程调用yield()后，线程会让出CPU使用权，将当前线程转为就绪状态等待CPU再次调度。
		wait:中文意思是等待，当当前线程调用wait()后，线程转阻塞，直到被通知notify()、notifyAll(),转为就绪态。		


JVM性能调优的监控工具了解那些？
简单谈谈JVM内存模型，以及volatile关键字
垃圾收集器与内存分配策略
垃圾收集算法
MySQL几种常用的存储引擎区别
数据库的隔离级别